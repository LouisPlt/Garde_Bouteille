extends layout
block content
	.container-fluid
		.row
			.box
				.col-lg-12
					hr
					h2.intro-text.text-center(style="text-align: center;") Trouvez les caves proches de chez vous !
					hr
					br
					input#pac-input.controls(type='text', placeholder='Enter a location')
					#map
		.row
			.box
				.col-lg-12
					table(class='table table-bordered table-striped table-hover', id='storeTable')
						tr
							th Caviste
							th Adresse
							th Caracteristiques
						each val in caves.Items
							tr#test(data-content='Popover with data-trigger', rel='popover', data-placement='top', data-original-title='Title', data-trigger='hover')
								th #{val.Pseudo}
								th #{val.Formatted_address}
								th #{val.Caracteristiques}

					script.
						$('#test').popover();
						function initMap() {
							var map = new google.maps.Map(document.getElementById('map'), {
								center: {lat: 48.8557, lng: 2.3450},
								zoom: 11
							});
							var input = (document.getElementById('pac-input'));
							map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
							var autocomplete = new google.maps.places.Autocomplete(input);
							autocomplete.bindTo('bounds', map);
							var infowindow = new google.maps.InfoWindow();
							
							autocomplete.addListener('place_changed', function() {
								infowindow.close();
								var place = autocomplete.getPlace();
								if (!place.geometry) {
									window.alert("Autocomplete's returned place contains no geometry");
									return;
								}
								// If the place has a geometry, then present it on a map.
								if (place.geometry.viewport) {
									map.fitBounds(place.geometry.viewport);
								} else {
									map.setCenter(place.geometry.location);
									map.setZoom(17); 
								}
								var address = '';
								if (place.address_components) {
									address = [
									(place.address_components[0] && place.address_components[0].short_name || ''),
									(place.address_components[1] && place.address_components[1].short_name || ''),
									(place.address_components[2] && place.address_components[2].short_name || '')
									].join(' ');
								}
							});
							addMarker(map);
						}

						function addMarker(map) {
							var caves_list = !{JSON.stringify(caves.Items)};

							//-			Change color marker
							//- var pinColor = "AFAE8B";
							//- var pinImage = new google.maps.MarkerImage("http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=%E2%80%A2|" + pinColor,
							//- 	new google.maps.Size(21, 34),
							//- 	new google.maps.Point(0,0),
							//- 	new google.maps.Point(10, 34));
							
							for ( var i = 0 ; i < caves_list.length ; i++) {
								var myLatLng = {lat: Number(caves_list[i].Lat), lng: Number(caves_list[i].Lng)};
								var marker = new google.maps.Marker({
								    position: myLatLng,
								    map: map
								});
								google.maps.event.addListener(marker, 'click', (function(marker, i) {
									return function() {
										document.location.href = "addvins/#{sess.login}/" + caves_list[i].ID;
									}
								})(marker, i));


								var infowindow = new google.maps.InfoWindow({
									content: "yop"
								});
								google.maps.event.addListener(marker, 'mouseover', (function(marker, i) {
									return function() {
										infowindow.open(map, this);
									}
								})(marker, i));
								google.maps.event.addListener(marker, 'mouseout', (function(marker, i) {
									return function() {
										infowindow.close();
									}
								})(marker, i));
							}
						}

						window.onload = initMap;

	script(async='', defer='', src='https://maps.googleapis.com/maps/api/js?key=#{process.env.APIKEY}&signed_in=true&libraries=places')